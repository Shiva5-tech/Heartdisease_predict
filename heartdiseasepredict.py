# -*- coding: utf-8 -*-
"""Heartdiseasepredict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iVbvEMeUMkobcyAGcgF8fIs76XeZqfio
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df=pd.read_csv('heart-disease.csv')

df.head(100)

#checking null values
df.isna().sum()

#Calculate the average age of patients with and without heart disease
plt.figure(figsize=(8, 6))
sns.boxplot(x='target', y='age', data=df, palette='Set2')
plt.title('Age Distribution by Heart Disease Presence')
plt.xlabel('Heart Disease (0 = No, 1 = Yes)')
plt.ylabel('Age')
plt.grid(True)
plt.show()

# Determine the distribution of chest pain types among patients
chest_pain_counts = df['cp'].value_counts()
print('\nDistribution of chest pain types:')
print(chest_pain_counts)

correlation = df['thalach'].corr(df['age'])
print(f'\nCorrelation between thalach and age: {correlation:.2f}')

sex_and_disease = pd.crosstab(df['sex'], df['target'])
print('\nEffect of sex on heart disease (0 = No, 1 = Yes):')
print(sex_and_disease)

# Plot a histogram of the age distribution of patients
plt.figure(figsize=(8, 6))
plt.hist(df['age'], bins=10, color='skyblue', edgecolor='black')
plt.title('Age Distribution of Patients')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Plot a scatter plot to show the relationship between thalach and age
plt.figure(figsize=(8, 6))
plt.scatter(df['age'], df['thalach'], color='green', alpha=0.5)
plt.title('Relationship between Age and Max Heart Rate (thalach)')
plt.xlabel('Age')
plt.ylabel('Max Heart Rate (thalach)')
plt.grid(True)
plt.show()

# Create a box plot to compare the age distribution of patients with and without heart disease
plt.figure(figsize=(8, 6))
sns.boxplot(x='target', y='age', data=df, palette='Set2')
plt.title('Age Distribution by Heart Disease Presence')
plt.xlabel('Heart Disease (0 = No, 1 = Yes)')
plt.ylabel('Age')
plt.grid(True)
plt.show()

x=df.drop('target',axis=1)
y=df['target']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

# Standardize features (optional but recommended for logistic regression)
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

model=LogisticRegression()

model.fit(x_train,y_train)

model.score(x_test,y_test)

df.head()

age =int(input('enter age:'))
sex=int(input('enter sex:'))
cp=int(input('enter cp:'))
trestbps=int(input('enter trestbps:'))
chol=int(input('enter chol:'))
fbeta_score=float(input('enter fbeta_score:'))
restecg=int(input('enter restecg:'))
thalach=int(input('enter thalach:'))
exang=int(input('enter exang:'))
oldpeak=float(input('enter oldpeak:'))
slope=int(input('enter slope:'))
ca=int(input('enter ca:'))
thal=int(input('enter thal:'))
df1=pd.DataFrame([[age,sex,cp,trestbps,chol,fbeta_score,restecg,thalach,exang,oldpeak,slope,ca,thal]])
model.predict(df1)